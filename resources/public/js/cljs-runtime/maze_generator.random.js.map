{"version":3,"sources":["maze_generator/random.cljc"],"mappings":";;AAGA,4BAAA,5BAAMA,gEAAKC;AAAX,AACE,OAACC,qCAAGD;;AAEN,4BAAA,5BAAME,gEAAKC;AAAX,AACE,AAACC,uGAAMD;;AACPA;;AAEF,mCAAA,nCAAME,8EACFC,EAAEC;AADN,AAEG,OAACC,WAAW,CAAG,CAACD,sCAAAA,wCAAAA,oBAAOD;;AAI1B,mCAAA,nCAAMG,8EAAYC,KAAKC;AAAvB,AACE,oBAAM,AAACC,oBAAUF;AAAjB,AACE,OAACG,4CAAIH,KAAK,AAACL,iCAAW,AAACS,gBAAMJ,MAAMC;;AADrC;;;AAGF,AAAA,+BAAA,uCAAAI,tEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,kEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,oEAAA,pEAAME,+EAAQd,MAAMD,EAAEuB,KAAOC;;AAA7B,AACE,GAAI,+CAAA,/CAACC,6CAAEzB;AACLwB;;AACA,eAAOvB;eAAM,KAAA,JAAGD;eAAKuB;eAAK,AAACG,6CAAK,iBAAAC,mBAAIH;AAAJ,AAAA,oBAAAG;AAAAA;;AAAA;;KAAmB,CAACJ,qCAAAA,4CAAAA,TAAKtB,wBAAAA;;;;;;;;;;;AAH7D,CAAA,uDAAA,vDAAMc;;AAAN;AAAA,CAAA,iDAAA,WAAAC,5DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA","names":["maze-generator.random/rng","seed","js/module$node_modules$seedrandom$index","maze-generator.random/pap","v","cljs.core.print","maze-generator.random/random-int","n","rn-fn","Math/floor","maze-generator.random/random-nth","coll","rn","cljs.core/not-empty","cljs.core.nth","cljs.core/count","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","maze-generator.random/looper","seq45748","G__45749","cljs.core/first","cljs.core/next","G__45750","G__45751","self__4851__auto__","func","return-val","cljs.core._EQ_","cljs.core.conj","or__4253__auto__"],"sourcesContent":["(ns maze-generator.random\n  (:require [\"seedrandom\" :as sr]))\n\n(defn rng [seed]\n  (sr seed))\n\n(defn pap [v]\n  (print v)\n  v)\n\n(defn random-int\n  ([n rn-fn]\n   (Math/floor (* (rn-fn) n))))\n\n\n\n(defn random-nth [coll rn]\n  (when (not-empty coll)\n    (nth coll (random-int (count coll) rn))))\n\n(defn looper [rn-fn n func & return-val]\n  (if (= n 0)\n    return-val\n    (recur rn-fn (- n 1) func (conj (or return-val []) (func rn-fn)))))\n\n\n;// Make a predictable pseudorandom number generator.\n;var myrng = new Math.seedrandom('hello.');\n;console.log(myrng());                // Always 0.9282578795792454\n;console.log(myrng());                // Always 0.3752569768646784\n;\n;// Use \"quick\" to get only 32 bits of randomness in a float.\n;console.log(myrng.quick());          // Always 0.7316977467853576\n;\n;// Use \"int32\" to get a 32 bit (signed) integer\n;console.log(myrng.int32());\n;(defn rand-integer\n;  ([end] (rand-integer (clojure.core/rand-int 99999999999) end))\n;  ([seed end]\n;   (rng/rand-int (rng/rng seed) end)))\n;\n;(defn rand-num\n;  ([end] (rand-num (clojure.core/rand-int 99999999999) end))\n;  ([seed end]\n;   (rng/rand (rng/rng seed) end)))\n;\n;(defn shuf\n;  ([end] (shuf (clojure.core/rand-int 99999999999) end))\n;  ([seed end]\n;   (rng/shuffle (rng/rng seed) end)))\n;\n;(defn random-nth\n;  ([end] (random-nth (clojure.core/rand-int 99999999999) end))\n;  ([seed end]\n;   (rng/rand-nth (rng/rng seed) end)))\n\n\n;(let [rng (rng/rng)\n;      coll (range 10)]\n;  (println (rng/rand rng)) ;; 0.8188531\n;  (println (rng/rand-int rng 10)) ;; 7\n;  (println (rng/rand-nth rng coll)) ;; 6\n;  (println (rng/random-sample rng 0.3 coll)) ;; (3 8 9)\n;  (println (rng/shuffle rng coll))) ;; [3 5 2 0 1 9 4 7 8 6]\n;\n;(rng) can of course also take a seed:\n;\n;(let [seed 19239492\n;      rng1 (rng/rng seed)\n;      rng2 (rng/rng seed)\n;      coll (range 10)]\n;  (println (= (rng/rand rng1) (rng/rand rng2))) ;; true\n;  (println (= (rng/shuffle rng1 coll) (rng/shuffle rng2 coll)))) ;; true\n"]}