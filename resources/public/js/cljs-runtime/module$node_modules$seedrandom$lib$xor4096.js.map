{
"version":3,
"file":"module$node_modules$seedrandom$lib$xor4096.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/seedrandom/lib/xor4096.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$seedrandom$lib$xor4096\"] = function(global,require,module,exports) {\n// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n};"],
"names":["shadow$provide","global","require","module","exports","define","XorGen","seed","me","next","me.next","w","X","i","v","t","init","j","limit","Math","max","length","charCodeAt","copy","f","slice","impl","opts","Date","xg","state","prng","double","prng.double","top","bot","result","int32","quick","prng.state","amd","xor4096"]
}
