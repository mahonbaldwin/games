{
"version":3,
"file":"goog.testing.pseudorandom.js",
"lineCount":58,
"mappings":"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",
"sources":["goog/testing/pseudorandom.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview PseudoRandom provides a mechanism for generating deterministic\n * pseudo random numbers based on a seed. Based on the Park-Miller algorithm.\n * See https://doi.org/10.1145%2F63039.63042 for details.\n */\n\ngoog.setTestOnly('goog.testing.PseudoRandom');\ngoog.provide('goog.testing.PseudoRandom');\n\ngoog.require('goog.Disposable');\n\n\n\n/**\n * Class for unit testing code that uses Math.random. Generates deterministic\n * random numbers.\n *\n * @param {number=} opt_seed The seed to use.\n * @param {boolean=} opt_install Whether to install the PseudoRandom at\n *     construction time.\n * @extends {goog.Disposable}\n * @constructor\n * @final\n */\ngoog.testing.PseudoRandom = function(opt_seed, opt_install) {\n  'use strict';\n  goog.Disposable.call(this);\n\n  if (opt_seed === undefined) {\n    opt_seed = goog.testing.PseudoRandom.seedUniquifier_++ + goog.now();\n  }\n  this.seed(opt_seed);\n\n  if (opt_install) {\n    this.install();\n  }\n};\ngoog.inherits(goog.testing.PseudoRandom, goog.Disposable);\n\n\n/**\n * Helps create a unique seed.\n * @type {number}\n * @private\n */\ngoog.testing.PseudoRandom.seedUniquifier_ = 0;\n\n\n/**\n * Constant used as part of the algorithm.\n * @type {number}\n */\ngoog.testing.PseudoRandom.A = 48271;\n\n\n/**\n * Constant used as part of the algorithm. 2^31 - 1.\n * @type {number}\n */\ngoog.testing.PseudoRandom.M = 2147483647;\n\n\n/**\n * Constant used as part of the algorithm. It is equal to M / A.\n * @type {number}\n */\ngoog.testing.PseudoRandom.Q = 44488;\n\n\n/**\n * Constant used as part of the algorithm. It is equal to M % A.\n * @type {number}\n */\ngoog.testing.PseudoRandom.R = 3399;\n\n\n/**\n * Constant used as part of the algorithm to get values from range [0, 1).\n * @type {number}\n */\ngoog.testing.PseudoRandom.ONE_OVER_M_MINUS_ONE =\n    1.0 / (goog.testing.PseudoRandom.M - 1);\n\n\n/**\n * The seed of the random sequence and also the next returned value (before\n * normalization). Must be between 1 and M - 1 (inclusive).\n * @type {number}\n * @private\n */\ngoog.testing.PseudoRandom.prototype.seed_ = 1;\n\n\n/**\n * Whether this PseudoRandom has been installed.\n * @type {boolean}\n * @private\n */\ngoog.testing.PseudoRandom.prototype.installed_;\n\n\n/**\n * The original Math.random function.\n * @type {function(): number}\n * @private\n */\ngoog.testing.PseudoRandom.prototype.mathRandom_;\n\n\n/**\n * Installs this PseudoRandom as the system number generator.\n */\ngoog.testing.PseudoRandom.prototype.install = function() {\n  'use strict';\n  if (!this.installed_) {\n    this.mathRandom_ = Math.random;\n    Math.random = goog.bind(this.random, this);\n    this.installed_ = true;\n  }\n};\n\n\n/** @override */\ngoog.testing.PseudoRandom.prototype.disposeInternal = function() {\n  'use strict';\n  goog.testing.PseudoRandom.superClass_.disposeInternal.call(this);\n  this.uninstall();\n};\n\n\n/**\n * Uninstalls the PseudoRandom.\n */\ngoog.testing.PseudoRandom.prototype.uninstall = function() {\n  'use strict';\n  if (this.installed_) {\n    Math.random = this.mathRandom_;\n    this.installed_ = false;\n  }\n};\n\n\n/**\n * Seed the generator.\n *\n * @param {number=} opt_seed The seed to use.\n */\ngoog.testing.PseudoRandom.prototype.seed = function(opt_seed) {\n  'use strict';\n  this.seed_ = (opt_seed || 0) % (goog.testing.PseudoRandom.M - 1);\n  if (this.seed_ <= 0) {\n    this.seed_ += goog.testing.PseudoRandom.M - 1;\n  }\n};\n\n\n/**\n * @return {number} The next number in the sequence.\n */\ngoog.testing.PseudoRandom.prototype.random = function() {\n  'use strict';\n  var hi = Math.floor(this.seed_ / goog.testing.PseudoRandom.Q);\n  var lo = this.seed_ % goog.testing.PseudoRandom.Q;\n  var test =\n      goog.testing.PseudoRandom.A * lo - goog.testing.PseudoRandom.R * hi;\n  if (test > 0) {\n    this.seed_ = test;\n  } else {\n    this.seed_ = test + goog.testing.PseudoRandom.M;\n  }\n  return (this.seed_ - 1) * goog.testing.PseudoRandom.ONE_OVER_M_MINUS_ONE;\n};\n"],
"names":["goog","setTestOnly","provide","require","testing","PseudoRandom","goog.testing.PseudoRandom","opt_seed","opt_install","Disposable","call","undefined","seedUniquifier_","now","seed","install","inherits","A","M","Q","R","ONE_OVER_M_MINUS_ONE","prototype","seed_","installed_","mathRandom_","goog.testing.PseudoRandom.prototype.install","Math","random","bind","disposeInternal","goog.testing.PseudoRandom.prototype.disposeInternal","superClass_","uninstall","goog.testing.PseudoRandom.prototype.uninstall","goog.testing.PseudoRandom.prototype.seed","goog.testing.PseudoRandom.prototype.random","hi","floor","lo","test"]
}
