{
"version":3,
"file":"module$node_modules$asn1_DOT_js$lib$asn1$api.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAazGC,QAASA,OAAM,CAACC,IAAD,CAAOC,IAAP,CAAa,CAC1B,IAAKD,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,IAAL,CAAYA,IAEZ,KAAKC,CAAAA,QAAL,CAAgB,EAChB,KAAKC,CAAAA,QAAL,CAAgB,EALU,CAV5B,MAAMA,SAAWP,OAAA,CAAQ,yDAAR,CAAjB,CACMM,SAAWN,OAAA,CAAQ,yDAAR,CADjB,CAEMQ,SAAWR,OAAA,CAAQ,+CAAR,CAELE,QAERO,CAAAA,MAAJ,CAAaC,QAAe,CAACN,IAAD,CAAOC,IAAP,CAAa,CACvC,MAAO,KAAIF,MAAJ,CAAWC,IAAX,CAAiBC,IAAjB,CADgC,CAYzCF,OAAOQ,CAAAA,SAAUC,CAAAA,YAAjB;AAAgCC,QAAoB,CAACC,IAAD,CAAO,CAGzDC,QAASA,UAAS,CAACC,MAAD,CAAS,CACzB,IAAKC,CAAAA,UAAL,CAAgBD,MAAhB,CAAwBZ,aAAxB,CADyB,CAF3B,MAAMA,cAAO,IAAKA,CAAAA,IAKlBI,SAAA,CAASO,SAAT,CAAoBD,IAApB,CACAC,UAAUJ,CAAAA,SAAUM,CAAAA,UAApB,CAAiCC,QAAmB,CAACF,MAAD,CAASZ,IAAT,CAAe,CACjEU,IAAKK,CAAAA,IAAL,CAAU,IAAV,CAAgBH,MAAhB,CAAwBZ,IAAxB,CADiE,CAInE,OAAO,KAAIW,SAAJ,CAAc,IAAd,CAXkD,CAc3DZ,OAAOQ,CAAAA,SAAUS,CAAAA,WAAjB,CAA+BC,QAAoB,CAACC,GAAD,CAAM,CACvDA,GAAA,CAAMA,GAAN,EAAa,KAER,KAAKhB,CAAAA,QAASiB,CAAAA,cAAd,CAA6BD,GAA7B,CAAL,GACE,IAAKhB,CAAAA,QAAL,CAAcgB,GAAd,CADF,CACuB,IAAKV,CAAAA,YAAL,CAAkBN,QAAA,CAASgB,GAAT,CAAlB,CADvB,CAEA,OAAO,KAAKhB,CAAAA,QAAL,CAAcgB,GAAd,CALgD,CAQzDnB,OAAOQ,CAAAA,SAAUa,CAAAA,MAAjB,CAA0BC,QAAe,CAACC,IAAD,CAAOJ,GAAP,CAAYK,OAAZ,CAAqB,CAC5D,MAAO,KAAKP,CAAAA,WAAL,CAAiBE,GAAjB,CAAsBE,CAAAA,MAAtB,CAA6BE,IAA7B;AAAmCC,OAAnC,CADqD,CAI9DxB,OAAOQ,CAAAA,SAAUiB,CAAAA,WAAjB,CAA+BC,QAAoB,CAACP,GAAD,CAAM,CACvDA,GAAA,CAAMA,GAAN,EAAa,KAER,KAAKf,CAAAA,QAASgB,CAAAA,cAAd,CAA6BD,GAA7B,CAAL,GACE,IAAKf,CAAAA,QAAL,CAAce,GAAd,CADF,CACuB,IAAKV,CAAAA,YAAL,CAAkBL,QAAA,CAASe,GAAT,CAAlB,CADvB,CAEA,OAAO,KAAKf,CAAAA,QAAL,CAAce,GAAd,CALgD,CAQzDnB,OAAOQ,CAAAA,SAAUmB,CAAAA,MAAjB,CAA0BC,QAAe,CAACL,IAAD,CAAOJ,GAAP,CAA2BU,QAA3B,CAAqC,CAC5E,MAAO,KAAKJ,CAAAA,WAAL,CAAiBN,GAAjB,CAAsBQ,CAAAA,MAAtB,CAA6BJ,IAA7B,CAAmCM,QAAnC,CADqE,CAvD2B;",
"sources":["node_modules/asn1_DOT_js/lib/asn1/api.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$asn1_DOT_js$lib$asn1$api\"] = function(global,require,module,exports) {\n'use strict';\n\nconst encoders = require('./encoders');\nconst decoders = require('./decoders');\nconst inherits = require('inherits');\n\nconst api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n}\n\nEntity.prototype._createNamed = function createNamed(Base) {\n  const name = this.name;\n\n  function Generated(entity) {\n    this._initNamed(entity, name);\n  }\n  inherits(Generated, Base);\n  Generated.prototype._initNamed = function _initNamed(entity, name) {\n    Base.call(this, entity, name);\n  };\n\n  return new Generated(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Entity","name","body","decoders","encoders","inherits","define","api.define","prototype","_createNamed","Entity.prototype._createNamed","Base","Generated","entity","_initNamed","Generated.prototype._initNamed","call","_getDecoder","Entity.prototype._getDecoder","enc","hasOwnProperty","decode","Entity.prototype.decode","data","options","_getEncoder","Entity.prototype._getEncoder","encode","Entity.prototype.encode","reporter"]
}
