{"version":3,"sources":["schema/utils.cljs"],"mappings":"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","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","schema.utils/assoc-when","seq50170","G__50171","cljs.core/first","cljs.core/next","self__4851__auto__","m","kvs","js/Error","cljs.core/even?","cljs.core/count","cljs.core.into","or__4253__auto__","iter__4652__auto__","s__50173","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__50175","cljs.core/chunk-buffer","i__50174","vec__50176","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50172","cljs.core/chunk-rest","vec__50179","cljs.core/cons","cljs.core/rest","k","v","cljs.core.partition","schema.utils/type-of","x","schema.utils/fn-schema-bearer","f","schema.utils/format*","seq50182","G__50183","fmt","args","cljs.core.apply","goog.string/format","schema.utils/max-value-length","cljs.core.atom","schema.utils/value-name","value","t","cljs.core/deref","cljs.core.symbol","schema.utils/unmunge","s","p1__50184#","cljs.core.sort_by","cljs.core/second","cljs.core.reduce","p__50185","vec__50186","to","from","clojure.string/replace","schema.utils/fn-name","vec__50189","_","cljs.core/re-matches","cljs.core.pr_str","cljs.core._EQ_","cljs.core/demunge","cljs.core/re-find","schema.utils/record?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IRecord","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","schema.utils/ValidationError","schema.utils/->ValidationError","schema","expectation-delay","fail-explanation","this","writer","opts","cljs.core/-pr-writer","schema.utils/validation-error-explain","err","cljs.core/List","schema.utils/make-ValidationError","schema.utils/NamedError","schema.utils/->NamedError","name","error","schema.utils/named-error-explain","this__4502__auto__","k__4503__auto__","this__4504__auto__","k50194","else__4505__auto__","G__50198","cljs.core/Keyword","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","ret__4525__auto__","p__50199","vec__50200","k__4526__auto__","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__50193","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this50195","other50196","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__4509__auto__","G__50203","this__4510__auto__","k__4511__auto__","pred__50204","cljs.core/keyword-identical?","expr__50205","cljs.core.assoc","this__4515__auto__","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-conj","schema.utils/ErrorContainer","this__4546__auto__","writer__4547__auto__","G__50197","extmap__4542__auto__","G__50207","cljs.core/record?","schema.utils/->ErrorContainer","schema.utils/map->ErrorContainer","schema.utils/error","schema.utils/error?","schema.utils/error-val","schema.utils/declare-class-schema!","klass","schema.utils.goog$module$goog$object.set","schema.utils/class-schema","schema.utils.goog$module$goog$object.get","schema.utils/use-fn-validation","cljs.core/chunk-first"],"sourcesContent":["(ns schema.utils\n  \"Private utilities used in schema implementation.\"\n  (:refer-clojure :exclude [record?])\n                                              \n         (:require\n          goog.string.format\n          [goog.object :as gobject]\n          [goog.string :as gstring]\n          [clojure.string :as string])\n         (:require-macros [schema.utils :refer [char-map]]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Miscellaneous helpers\n\n(defn assoc-when\n  \"Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing.\"\n  [m & kvs]\n  (assert (even? (count kvs)))\n  (into (or m {})\n        (for [[k v] (partition 2 kvs)\n              :when v]\n          [k v])))\n\n(defn type-of [x]\n                 \n         (js* \"typeof ~{}\" x))\n\n(defn fn-schema-bearer\n  \"What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself.\"\n  [f]\n                 \n         f)\n\n(defn format* [fmt & args]\n  (apply                     gstring/format fmt args))\n\n(def max-value-length (atom 19))\n\n(defn value-name\n  \"Provide a descriptive short name for a value.\"\n  [value]\n  (let [t (type-of value)]\n    (if (<= (count (str value)) @max-value-length)\n      value\n      (symbol (str \"a-\"                                  t)))))\n\n                     \n                                 \n\n(defn unmunge\n  \"TODO: eventually use built in demunge in latest cljs.\"\n  [s]\n  (->> (char-map)\n       (sort-by #(- (count (second %))))\n       (reduce (fn [^String s [to from]] (string/replace s from (str to))) s)))\n\n(defn fn-name\n  \"A meaningful name for a function that looks like its symbol, if applicable.\"\n  [f]\n        \n  (let [[_ s] (re-matches #\"#object\\[(.*)\\]\" (pr-str f))]\n    (if (= \"Function\" s)\n      \"function\"\n      (->> s demunge (re-find #\"[^/]+(?:$|(?=/+$))\"))))\n                                    \n                                        \n                          \n                                   \n                                                                    \n                         \n                                                    )\n\n(defn record? [x]\n                                          \n         (satisfies? IRecord x))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Error descriptions\n\n;; A leaf schema validation error, describing the schema and value and why it failed to\n;; match the schema.  In Clojure, prints like a form describing the failure that would\n;; return true.\n\n(declare validation-error-explain)\n\n(deftype ValidationError [schema value expectation-delay fail-explanation]\n         IPrintWithWriter\n         (-pr-writer [this writer opts]\n           (-pr-writer (validation-error-explain this) writer opts)))\n\n(defn validation-error-explain [^ValidationError err]\n  (list (or (.-fail-explanation err) 'not) @(.-expectation-delay err)))\n\n                                                                   \n                                                    \n                                                       \n\n(defn make-ValidationError\n  \"for cljs sake (easier than normalizing imports in macros.clj)\"\n  [schema value expectation-delay fail-explanation]\n  (ValidationError. schema value expectation-delay fail-explanation))\n\n\n;; Attach a name to an error from a named schema.\n(declare named-error-explain)\n\n(deftype NamedError [name error]\n         IPrintWithWriter\n         (-pr-writer [this writer opts]\n           (-pr-writer (named-error-explain this) writer opts)))\n\n(defn named-error-explain [^NamedError err]\n  (list 'named (.-error err) (.-name err)))\n\n                                                                   \n                                               \n                                                  \n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Monoidish error containers, which wrap errors (to distinguish from success values).\n\n(defrecord ErrorContainer [error])\n\n(defn error\n  \"Distinguish a value (must be non-nil) as an error.\"\n  [x] (assert x) (->ErrorContainer x))\n\n(defn error? [x]\n  (instance? ErrorContainer x))\n\n(defn error-val [x]\n  (when (error? x)\n    (.-error ^ErrorContainer x)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Registry for attaching schemas to classes, used for defn and defrecord\n\n     \n                                                                                                       \n                                            \n                                                                                     \n                                                                              \n                                                                      \n                                                 \n                          \n                                                                                   \n                                         \n\n                            \n                                                                       \n                                   \n\n      \n(do\n  (defn declare-class-schema! [klass schema]\n    (gobject/set klass \"schema$utils$schema\" schema))\n\n  (defn class-schema [klass]\n    (gobject/get klass \"schema$utils$schema\")))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Utilities for fast-as-possible reference to use to turn fn schema validation on/off\n\n(def use-fn-validation\n  \"Turn on run-time function validation for functions compiled when\n   s/compile-fn-validation was true -- has no effect for functions compiled\n   when it is false.\"\n  ;; specialize in Clojure for performance\n                                                            \n         (atom false))\n\n;;;;;;;;;;;; This file autogenerated from src/cljx/schema/utils.cljx\n"]}