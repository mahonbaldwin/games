{"version":3,"sources":["rand_cljc/core.cljc"],"mappings":"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","names":["rand-cljc$core$IRandom$_rand$dyn","x__4550__auto__","m__4551__auto__","rand-cljc.core/-rand","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","rand-cljc$core$IRandom$_shuffle$dyn","rand-cljc.core/-shuffle","rand-cljc.core/IRandom","this","coll","cljs.core/PROTOCOL_SENTINEL","js/goog.testing.PseudoRandom","arr","cljs.core/to-array","rand_cljc.core.goog$module$goog$array.shuffle","cljs.core/vec","var_args","G__41748","rand-cljc.core/rng","js/Error","seed","G__41756","rand-cljc.core/rand","rng","n","rand-cljc.core/rand-int","rand_cljc.core.rand","rand-cljc.core/rand-nth","cljs.core.nth","cljs.core/count","G__41771","rand-cljc.core/random-sample","prob","cljs.core.filter","_","rand-cljc.core/shuffle"],"sourcesContent":["(ns rand-cljc.core\n  (:refer-clojure :exclude [rand\n                            rand-int\n                            rand-nth\n                            random-sample\n                            shuffle])\n  #?(:cljs (:require [goog.array]))\n  #?(:clj (:import [java.util Random ArrayList Collection Collections]))\n  #?(:cljs (:import [goog.testing PseudoRandom])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; It would be nice if this could just be a single-function protocol,\n;; but Java's shuffle wants a complete `Random` instance, not just a\n;; nextFloat function or equivalent, so we can't build `shuffle`\n;; directly on top of `-rand` if we want to use `Collections/shuffle`.\n\n(defprotocol IRandom\n  (-rand [this])\n  (-shuffle [this coll]))\n\n#?(:clj\n   (extend-protocol IRandom\n     Random\n     (-rand [this] (.nextFloat this))\n     (-shuffle [this coll]\n       (let [arr (ArrayList. ^Collection coll)]\n         (Collections/shuffle arr this)\n         (vec arr)))))\n\n#?(:cljs\n   (extend-protocol IRandom\n     PseudoRandom\n     (-rand [this] (.random this))\n     (-shuffle [this coll]\n       (let [arr (to-array coll)]\n         (goog.array/shuffle arr #(.random this))\n         (vec arr)))))\n\n(defn rng\n  ([]\n   #?(:clj (Random.)\n      :cljs (PseudoRandom.)))\n  ([seed]\n   #?(:clj (Random. seed)\n      :cljs (PseudoRandom. seed))))\n\n(defn rand\n  ([rng] (-rand rng))\n  ([rng n] (* n (-rand rng))))\n\n(defn rand-int\n  [rng n]\n  (int (* n (rand rng))))\n\n(defn rand-nth\n  [rng coll]\n  (nth coll (rand-int rng (count coll))))\n\n(defn random-sample\n  ([rng prob]\n     (filter (fn [_] (< (rand rng) prob))))\n  ([rng prob coll]\n     (filter (fn [_] (< (rand rng) prob)) coll)))\n\n(defn shuffle\n  [rng coll]\n  (-shuffle rng coll))\n"]}