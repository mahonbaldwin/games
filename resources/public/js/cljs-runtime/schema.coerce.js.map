{"version":3,"sources":["schema/coerce.cljs"],"mappings":"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","names":["schema.coerce/Schema","cljs.core/with-meta","schema.core/->Protocol","p1__43543__43544__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","schema.core/Schema","schema.coerce/CoercionMatcher","schema.core/make-fn-schema","schema.core/one","schema.core/maybe","schema.core/Any","ufv__","schema.utils/use-fn-validation","output-schema45761","input-schema45762","input-checker45763","cljs.core/Delay","schema.core/checker","output-checker45764","ret__44409__auto__","validate__42814__auto__","cljs.core/deref","args__42815__auto__","G__45765","G__45766","schema.core/fn-validator","G__45767","G__45768","G__45769","G__45770","G__45771","temp__5753__auto__","fexpr__45772","error__42816__auto__","cljs.core.ex_info","schema.utils.format_STAR_","cljs.core.pr_str","o__42817__auto__","schema","coercion-matcher","G__45774","G__45775","G__45776","G__45777","G__45778","fexpr__45779","schema.utils/declare-class-schema!","schema.utils/fn-schema-bearer","schema.core/->FnSchema","schema.coerce/coercer","schema.spec.core/run-checker","s","params","c","schema.spec.core/checker","schema.core/spec","temp__5751__auto__","coercer","x","e45773","js/Object","v","schema.utils/error?","t","schema.utils/error","schema.utils/make-ValidationError","output-schema45780","input-schema45781","input-checker45782","output-checker45783","G__45784","G__45785","G__45786","G__45787","G__45788","G__45789","G__45790","fexpr__45791","G__45792","G__45793","G__45794","G__45795","G__45796","fexpr__45797","schema.coerce/coercer!","value","coerced","error","schema.utils/error-val","output-schema45799","input-schema45800","input-checker45801","output-checker45802","G__45803","G__45804","G__45805","G__45806","G__45807","G__45808","fexpr__45809","matchers","G__45810","G__45811","G__45812","G__45813","G__45814","fexpr__45815","schema.coerce/first-matcher","cljs.core/first","p1__45798#","cljs.core.keep","schema.coerce/string->keyword","cljs.core.keyword","schema.coerce/string->boolean","cljs.core._EQ_","clojure.string/lower-case","schema.coerce/keyword-enum-matcher","schema.core/EnumSchema","cljs.core/every?","cljs.core/keyword?","schema.core/EqSchema","cljs.core/Keyword","schema.coerce/set-matcher","cljs.core/PersistentHashSet","cljs.core/sequential?","cljs.core/set","schema.coerce/safe","f","e45816","e","p1__45817#","schema.coerce/string->uuid","cljs.core/uuid","schema.coerce/+json-coercions+","cljs.core.merge","schema.core/Keyword","schema.core/Bool","schema.core/Uuid","schema.coerce/json-coercion-matcher","or__4253__auto__","schema.coerce/edn-read-string","cljs.reader/read-string","schema.coerce/+string-coercions+","schema.core/Num","schema.core/Int","schema.coerce/string-coercion-matcher"],"sourcesContent":["(ns schema.coerce\n  \"Extension of schema for input coercion (coercing an input to match a schema)\"\n  (:require\n          [cljs.reader :as reader]\n                              \n                                   \n   [schema.core :as s :include-macros true]\n   [schema.spec.core :as spec]\n   [schema.utils :as utils]\n   [clojure.string :as str])\n         (:require-macros [schema.macros :as macros]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Generic input coercion\n\n(def Schema\n  \"A Schema for Schemas\"\n  (s/protocol s/Schema))\n\n(def CoercionMatcher\n  \"A function from schema to coercion function, or nil if no special coercion is needed.\n   The returned function is applied to the corresponding data before validation (or walking/\n   coercion of its sub-schemas, if applicable)\"\n  (s/=> (s/maybe (s/=> s/Any s/Any)) Schema))\n\n(s/defn coercer\n  \"Produce a function that simultaneously coerces and validates a datum.  Returns\n   a coerced value, or a schema.utils.ErrorContainer describing the error.\"\n  [schema coercion-matcher :- CoercionMatcher]\n  (spec/run-checker\n   (fn [s params]\n     (let [c (spec/checker (s/spec s) params)]\n       (if-let [coercer (coercion-matcher s)]\n         (fn [x]\n           (macros/try-catchall\n            (let [v (coercer x)]\n              (if (utils/error? v)\n                v\n                (c v)))\n            (catch t (macros/validation-error s x t))))\n         c)))\n   true\n   schema))\n\n(s/defn coercer!\n  \"Like `coercer`, but is guaranteed to return a value that satisfies schema (or throw).\"\n  [schema coercion-matcher :- CoercionMatcher]\n  (let [c (coercer schema coercion-matcher)]\n    (fn [value]\n      (let [coerced (c value)]\n        (when-let [error (utils/error-val coerced)]\n          (macros/error! (utils/format* \"Value cannot be coerced to match schema: %s\" (pr-str error))\n                         {:schema schema :value value :error error}))\n        coerced))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Coercion helpers\n\n(s/defn first-matcher :- CoercionMatcher\n  \"A matcher that takes the first match from matchers.\"\n  [matchers :- [CoercionMatcher]]\n  (fn [schema] (first (keep #(% schema) matchers))))\n\n(defn string->keyword [s]\n  (if (string? s) (keyword s) s))\n\n(defn string->boolean\n  \"returns true for strings that are equal, ignoring case, to the string 'true'\n   (following java.lang.Boolean/parseBoolean semantics)\"\n  [s]\n  (if (string? s) (= \"true\" (str/lower-case s)) s))\n\n(defn keyword-enum-matcher [schema]\n  (when (or (and (instance?                                     s/EnumSchema schema)\n                 (every? keyword? (.-vs ^schema.core.EnumSchema schema)))\n            (and (instance?                                   s/EqSchema schema)\n                 (keyword? (.-v ^schema.core.EqSchema schema))))\n    string->keyword))\n\n(defn set-matcher [schema]\n  (if (instance?                                          cljs.core.PersistentHashSet schema)\n    (fn [x] (if (sequential? x) (set x) x))))\n\n(defn safe\n  \"Take a single-arg function f, and return a single-arg function that acts as identity\n   if f throws an exception, and like f otherwise.  Useful because coercers are not explicitly\n   guarded for exceptions, and failing to coerce will generally produce a more useful error\n   in this case.\"\n  [f]\n  (fn [x] (macros/try-catchall (f x) (catch e x))))\n\n                         \n                                                                                              \n             \n                \n                            \n                         \n                \n                     \n\n(def string->uuid\n  \"Returns instance of UUID if input is a string.\n   Note: in CLJS, this does not guarantee a specific UUID string representation,\n         similar to #uuid reader\"\n       \n                                               \n        \n  #(if (string? %) (uuid %) %))\n\n\n(def ^:no-doc +json-coercions+\n  (merge\n   {s/Keyword string->keyword\n    s/Bool string->boolean\n    s/Uuid string->uuid}\n                                              \n                              \n                             \n                              \n                            \n                                  ))\n\n(defn json-coercion-matcher\n  \"A matcher that coerces keywords and keyword eq/enums from strings, and longs and doubles\n     from numbers on the JVM (without losing precision)\"\n  [schema]\n  (or (+json-coercions+ schema)\n      (keyword-enum-matcher schema)\n      (set-matcher schema)))\n\n(def edn-read-string\n  \"Reads one object from a string. Returns nil when string is nil or empty\"\n                               reader/read-string)\n\n(def ^:no-doc +string-coercions+\n  (merge\n   +json-coercions+\n   {s/Num (safe edn-read-string)\n    s/Int (safe edn-read-string)}\n                                                            \n                                                           \n                                                ))\n\n(defn string-coercion-matcher\n  \"A matcher that coerces keywords, keyword eq/enums, s/Num and s/Int,\n     and long and doubles (JVM only) from strings.\"\n  [schema]\n  (or (+string-coercions+ schema)\n      (keyword-enum-matcher schema)\n      (set-matcher schema)))\n\n;;;;;;;;;;;; This file autogenerated from src/cljx/schema/coerce.cljx\n"]}