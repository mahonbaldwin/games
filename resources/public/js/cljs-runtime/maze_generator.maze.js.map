{"version":3,"sources":["maze_generator/maze.cljc"],"mappings":"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","names":["p__48103","p__48104","map__48105","cljs.core/--destructure-map","cljs.core.get","map__48106","maze-generator.maze/cell-index","x","y","cell","width","maze","maze-generator.maze/cell-for-ui","opts","cells","cljs.core/set","cljs.core/contains?","p__48107","p__48108","map__48109","map__48110","maze-generator.maze/maze-neighbors","height","surrounding-cells","cljs.core.remove","p__48115","vec__48116","cljs.core.nth","_","map__48119","cljs.core.into","cljs.core.map","p__48111","vec__48112","dir","cel","index","p__48120","map__48121","maze-generator.maze/random-neighbor","rng","unvisited-cells","new-x","maze-generator.maze/populate","iter__4652__auto__","s__48123","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","cljs.core/first","iterys__4648__auto__","s__48125","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__48127","cljs.core/chunk-buffer","i__48126","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48124","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4649__auto__","cljs.core.concat","iter__48122","h","cljs.core.range","w","maze-generator.maze/rand-from-coll","coll","vec__48128","indx","maze-generator.random/random-int","maze-generator.util/pop-i","maze-generator.maze/direction-compliment","direction","pred__48131","expr__48132","js/Error","cljs.core/=","maze-generator.maze/dead-end","cljs.core.println","cljs.pprint.pprint","maze-generator.maze/retry-cell","path","$","p1__48134#","cljs.core.filter","cljs.core/not","maze-generator.random/random-nth","p__48135","map__48136","maze-generator.maze/cell-in-maze?","or__4253__auto__","maze-generator.maze/mark-neighbors","from-index","to-index","cljs.core.update_in","cljs.core/conj","maze-generator.maze/path-gen","selected-index","path-indexes","map__48140","eligible-neighbors","c","cljs.core/some","new-index","new-cell","cljs.core._EQ_","cljs.core/assoc-in","retry-c","cljs.core.conj","p1__48137#","new-path","new-maze","p1__48138#","p1__48139#","maze-generator.maze/maze-gen","current-maze","unvisited-indexes","vec__48141","vec__48144","cljs.core/empty?","p__48147","map__48148","maze-generator.maze/generate","start-cell","end-cell","seed","vec__48149","maze-generator.random/rng","cljs.core/rand-int","cljs.core/vec","starting-index","initial-maze","m","new-cells","p__48152","map__48153","connected-directions","borders","clojure.set.difference","cljs.core.assoc","cljs.core/chunk-first"],"sourcesContent":["(ns maze-generator.maze\n  (:require [clojure.set :as s]\n            [maze-generator.random :as random]\n            [maze-generator.util :as util]))\n\n(defn cell-index [{:keys [x y] :as cell} {:keys [width] :as maze}]\n  (+ (* y width) x))\n\n(defn cell-for-ui [x y opts]\n  (let [cells (set opts)]\n    {:x     x\n     :y     y\n     :north (contains? cells :north)\n     :east  (contains? cells :east)\n     :south (contains? cells :south)\n     :west  (contains? cells :west)\n     :start (contains? cells :start)\n     :end   (contains? cells :end)}))\n\n;(def temp-maze\n;  {:height 4\n;   :width  5\n;   :cells  [(cell-for-ui 0 0 :start :west) (cell-for-ui 1 0 :north :west) (cell-for-ui 2 0 :north) (cell-for-ui 3 0 :north) (cell-for-ui 4 0 :north :east)\n;            (cell-for-ui 0 1 :west) (cell-for-ui 1 1 :north) (cell-for-ui 2 1) (cell-for-ui 3 1 :west) (cell-for-ui 4 1 :west :east)\n;            (cell-for-ui 0 2 :north :west) (cell-for-ui 1 2) (cell-for-ui 2 2 :north) (cell-for-ui 3 2 :west) (cell-for-ui 4 2 :west :east)\n;            (cell-for-ui 0 3 :north :west :south) (cell-for-ui 1 3 :north :south) (cell-for-ui 2 3 :south) (cell-for-ui 3 3 :end :north) (cell-for-ui 4 3 :east :west :south)]})\n\n(defn- maze-neighbors [{:keys [x y]} {:keys [width height cells] :as maze}]\n  (let [surrounding-cells {:north {:x x :y (- y 1)}\n                           :south {:x x :y (+ y 1)}\n                           :west  {:x (- x 1) :y y}\n                           :east  {:x (+ x 1) :y y}}]\n    (->> surrounding-cells\n         (remove (fn [[_ cell]]\n                   (let [{:keys [x y]} cell]\n                     (or (neg? x)\n                         (neg? y)\n                         (<= width x)\n                         (<= height y)))))\n         (into {})\n         (map (fn [[dir cel]]\n                (let [index (cell-index cel maze)]\n                  {:index     index\n                   :cell      (nth cells index)\n                   :direction dir}))))))\n\n\n(defn- random-neighbor [rng {:keys [x y] :as cell} maze unvisited-cells]\n  (let [new-x 0]))\n\n(defn- populate [height width]\n  (for [h (range height)\n        w (range width)]\n    {:i (cell-index {:x w :y h} {:width width}) :x w :y h :connected-neighbors #{} :connected-directions #{}}))\n\n(defn- rand-from-coll [rng coll]\n  (let [indx (random/random-int (count coll) rng)\n        [cell coll] (util/pop-i coll indx)]\n    [cell coll]))\n\n(defn- direction-compliment [direction]\n  (condp = direction\n    :north :south\n    :south :north\n    :east :west\n    :west :east))\n\n(defn- dead-end [maze] ;todo work on this\n  (println :we've-come-to-a-dead-end)\n  (cljs.pprint/pprint maze))\n\n(defn- retry-cell [rng path maze]\n  (as-> path $\n       (filter #(not (:revisited %)) $)\n       (random/random-nth $ rng)))\n\n; while there are cells that have not been added to the maze\n; pick a cell randomly add it to the maze\n; pick another cell randomly\n; create a random walk until you meet a cell already in the maze avoiding creating loops in the current walk\n\n(defn cell-in-maze? [{:keys [cell]}]\n  (or (:initial-cell? cell)\n      (< 0 (count (:connected-neighbors cell)))))\n\n(defn mark-neighbors [maze from-index to-index direction]\n  (-> maze\n      (update-in [:cells from-index :connected-neighbors] conj to-index)\n      (update-in [:cells from-index :connected-directions] conj direction)\n      (update-in [:cells to-index :connected-neighbors] conj from-index)\n      (update-in [:cells to-index :connected-directions] conj (direction-compliment direction))))\n\n(defn- path-gen [rng selected-index path-indexes maze unvisited-cells]\n  (println :selected-index selected-index)\n  (let [cell (nth (:cells maze) selected-index)\n        eligible-neighbors (filter (fn [c]\n                                     (not (some path-indexes [(:index c)])))\n                                   (maze-neighbors cell maze))\n        {new-index :index :as new-cell} (random/random-nth eligible-neighbors rng)]\n    (println :new-cell new-cell (cell-in-maze? new-cell))\n    (cond (= 0 (count eligible-neighbors)) (let [maze (assoc-in maze [:cells selected-index :revisited?] true)\n                                                 retry-c (retry-cell rng path-indexes maze)]\n                                             (recur rng retry-c (conj path-indexes new-index) maze (remove #(= new-index %) unvisited-cells))) ; recur on a previous cell in the path, mark cell with :path-checked\n          (cell-in-maze? new-cell) [(mark-neighbors maze selected-index new-index (:direction new-cell))\n                                    unvisited-cells]\n          :else (let [new-path (conj path-indexes new-index)\n                      new-maze (mark-neighbors maze selected-index new-index (:direction new-cell))\n                      unvisited-cells (remove #(= new-index %) unvisited-cells)]\n                  (recur rng new-index new-path new-maze (remove #(= new-index %) unvisited-cells)))))) ; todo temporary, change this\n; does the selected cell have neighbors that are not already part of the path?\n;   select a random neighbor (that exists and is not part of the path\n;   is it part of the maze already\n;     join it to the maze\n; mark this cell as a dead-end and check one of the previous cells (it should not be possible for all parts of a path to be a dead end as at least one should be able to connect to the maze)\n\n\n(defn- maze-gen [rng current-maze unvisited-indexes]\n  ; pick a cell at random\n  (let [[new-index unvisited-indexes] (rand-from-coll rng unvisited-indexes)\n        [maze unvisited-indexes] (path-gen rng new-index #{new-index} current-maze unvisited-indexes)]\n    (if (empty? unvisited-indexes)\n      maze\n      (recur rng maze unvisited-indexes))))\n\n; if there are neighbors (including the maze itself)\n;   pick a random neighbor and add to the list\n; else\n;   look at earlier part of path and try again\n\n(defn generate [{:keys [height width start-cell end-cell seed] :or {height 10 width 10 start-cell [:top :left] end-cell [:bottom :right]}}]\n  (let [rng (random/rng (or seed (rand-int 1000000000)))\n        cells (vec (populate height width))\n        [starting-index unvisited-indexes] (rand-from-coll rng (range (count cells)))\n        cells (assoc-in cells [starting-index :initial-cell?] true)\n        initial-maze {:height height :width width :starting-index starting-index :cells cells}\n        m (maze-gen rng initial-maze unvisited-indexes)\n        new-cells (map (fn [{:keys [x y connected-directions] :as cell}]\n                         (let [borders (s/difference #{:north :south :east :west} connected-directions)\n                               borders (cond (and (= x 0) (= y 0)) (conj borders :start)\n                                             (and (= x (- width 1)) (= y (- height 1))) (conj borders :end)\n                                             :else borders)]\n                           (cell-for-ui x y borders)))\n                       (:cells m))\n        m (assoc m :cells new-cells)]\n    (cljs.pprint/pprint m)\n    m))\n\n\n;(maze-gen initial-maze)))\n; pick starting point (using rng) and add it to the maze with no parent or children\n; call (maze-gen [start-cell [] {:height height :width width :cells [start-cell]})\n\n\n\n"]}